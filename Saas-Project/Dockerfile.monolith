FROM rust:1.73-slim as backend-builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy Cargo files for layer caching
COPY backend/Cargo.toml backend/Cargo.lock ./

# Create fake src/main.rs to cache dependencies
RUN mkdir -p src && \
    echo "fn main() {println!(\"if you see this, the build broke\")}" > src/main.rs && \
    cargo build --release && \
    rm -f target/release/deps/saas_umkm_backend*

# Copy actual source code
COPY backend/src ./src
COPY backend/migrations ./migrations

# Build the actual application
RUN cargo build --release

# Node stage for frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy package files for layer caching
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the frontend source code
COPY frontend ./

# Build frontend
RUN npm run build

# Final stage
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Copy backend binary
COPY --from=backend-builder /app/target/release/saas-umkm-backend ./
COPY --from=backend-builder /app/migrations ./migrations

# Copy frontend build output
COPY --from=frontend-builder /app/.next/standalone ./frontend
COPY --from=frontend-builder /app/.next/static ./frontend/.next/static
COPY --from=frontend-builder /app/public ./frontend/public

# Setup nginx configuration
COPY infrastructure/deployment/nginx.conf /etc/nginx/nginx.conf

# Create directory for uploads
RUN mkdir -p /app/uploads && chmod 755 /app/uploads

# Set environment variables
ENV NODE_ENV=production

# Expose ports
EXPOSE 3000 8000

# Copy startup script
COPY infrastructure/deployment/start-monolith.sh ./start.sh
RUN chmod +x ./start.sh

CMD ["./start.sh"]
