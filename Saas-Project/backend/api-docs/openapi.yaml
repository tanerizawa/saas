openapi: 3.0.3
info:
  title: SaaS UMKM Backend API
  description: |
    API documentation for Indonesian SME licensing and business management platform.
    This API provides endpoints for user management, company registration, license 
    management, and business operations.
  version: 0.1.0
  contact:
    name: SaaS UMKM Team
    
servers:
  - url: http://localhost:8080/api
    description: Local development server
  - url: https://api-staging.saas-umkm.com/api
    description: Staging server
  - url: https://api.saas-umkm.com/api
    description: Production server

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Companies
    description: Company management endpoints
  - name: Licenses
    description: License management endpoints
  - name: Business
    description: Business operations endpoints
  - name: Finance
    description: Financial management endpoints

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  version:
                    type: string
                    example: 0.1.0
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-07-25T12:00:00Z'

  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token
      operationId: loginUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      summary: Get current user profile
      description: Returns the profile of the currently authenticated user
      operationId: getUserProfile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: List all users
      description: Returns a paginated list of users
      operationId: listUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  pagination:
                    $ref: '#/components/schemas/PaginationMetadata'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - requires admin privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/search:
    get:
      summary: Search users
      description: Search users by email or name
      operationId: searchUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  pagination:
                    $ref: '#/components/schemas/PaginationMetadata'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - requires admin privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies:
    post:
      summary: Create a new company
      description: Creates a new company for the authenticated user
      operationId: createCompany
      tags:
        - Companies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequest'
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List companies
      description: List companies owned by the authenticated user or all companies for admin
      operationId: listCompanies
      tags:
        - Companies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Companies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompanyResponse'
                  pagination:
                    $ref: '#/components/schemas/PaginationMetadata'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies/{id}:
    get:
      summary: Get company by ID
      description: Retrieves a company by its ID
      operationId: getCompany
      tags:
        - Companies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Company retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - user doesn't have access to this company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Company not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update company
      description: Updates a company's information
      operationId: updateCompany
      tags:
        - Companies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequest'
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - user doesn't have access to this company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Company not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete company
      description: Deletes a company
      operationId: deleteCompany
      tags:
        - Companies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Company deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - user doesn't have access to this company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Company not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRegistrationRequest:
      type: object
      required:
        - email
        - password
        - full_name
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: SecureP@ssw0rd
        full_name:
          type: string
          example: John Doe
        phone:
          type: string
          example: '+62812345678'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: SecureP@ssw0rd

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        full_name:
          type: string
          example: John Doe
        role:
          type: string
          enum: [umkm_owner, admin_staff, super_admin]
          example: umkm_owner
        status:
          type: string
          enum: [active, pending_verification, suspended]
          example: active
        phone:
          type: string
          nullable: true
          example: '+62812345678'
        email_verified:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'

    CompanyRequest:
      type: object
      required:
        - name
        - business_type
        - address
      properties:
        name:
          type: string
          example: Toko Jaya Abadi
        business_type:
          type: string
          example: retail
        address:
          type: string
          example: Jl. Pahlawan No. 123, Jakarta
        phone:
          type: string
          example: '+62212345678'
        tax_id:
          type: string
          example: '09.123.456.7-123.000'
        registration_number:
          type: string
          example: 'AHU-12345.AH.01.01.TAHUN2024'

    CompanyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        owner_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        name:
          type: string
          example: Toko Jaya Abadi
        business_type:
          type: string
          example: retail
        address:
          type: string
          example: Jl. Pahlawan No. 123, Jakarta
        phone:
          type: string
          example: '+62212345678'
        tax_id:
          type: string
          example: '09.123.456.7-123.000'
        registration_number:
          type: string
          example: 'AHU-12345.AH.01.01.TAHUN2024'
        verified:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'

    PaginationMetadata:
      type: object
      properties:
        total:
          type: integer
          example: 100
        limit:
          type: integer
          example: 10
        offset:
          type: integer
          example: 0
        has_more:
          type: boolean
          example: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Invalid input
        message:
          type: string
          example: Email is already in use
        status:
          type: integer
          example: 400
        timestamp:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'

  parameters:
    limitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        minimum: 0
        default: 0
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
