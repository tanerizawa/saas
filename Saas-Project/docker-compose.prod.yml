version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: saas-umkm-postgres-prod
    environment:
      POSTGRES_DB: saas_umkm_db
      POSTGRES_USER: saas_user
      POSTGRES_PASSWORD: saas_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas_user -d saas_umkm_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - saas-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: saas-umkm-backend-prod
    environment:
      - DATABASE_URL=postgresql://saas_user:saas_password@postgres:5432/saas_umkm_db
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - RUST_LOG=info
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - uploads_prod:/app/uploads
    networks:
      - saas-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: saas-umkm-frontend-prod
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - saas-network

  nginx:
    image: nginx:alpine
    container_name: saas-umkm-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - saas-network

  redis:
    image: redis:7-alpine
    container_name: saas-umkm-redis-prod
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data_prod:/data
    networks:
      - saas-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}

volumes:
  postgres_data_prod:
    driver: local
  uploads_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  saas-network:
    driver: bridge
