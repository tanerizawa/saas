#!/bin/bash

echo "üß™ Testing SaaS UMKM Backend API..."
echo "=================================="

BASE_URL="http://localhost:3000"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to test endpoint
test_endpoint() {
    local method=$1
    local endpoint=$2
    local data=$3
    local expected_status=$4
    local description=$5
    
    echo -e "\n${YELLOW}Testing: $description${NC}"
    echo "‚Üí $method $endpoint"
    
    if [ -n "$data" ]; then
        response=$(curl -s -w "\n%{http_code}" -X $method "$BASE_URL$endpoint" \
            -H "Content-Type: application/json" \
            -d "$data")
    else
        response=$(curl -s -w "\n%{http_code}" -X $method "$BASE_URL$endpoint")
    fi
    
    # Split response and status code
    status_code=$(echo "$response" | tail -n1)
    response_body=$(echo "$response" | sed '$d')
    
    if [ "$status_code" = "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} (Status: $status_code)"
        echo "Response: $response_body"
    else
        echo -e "${RED}‚ùå FAIL${NC} (Expected: $expected_status, Got: $status_code)"
        echo "Response: $response_body"
    fi
}

# Test 1: Health Check
test_endpoint "GET" "/health" "" "200" "Application Health Check"

# Test 2: Auth Health Check
test_endpoint "GET" "/api/v1/auth/health" "" "200" "Authentication Health Check"

# Test 3: Get Profile (without auth - should work for now)
test_endpoint "GET" "/api/v1/me" "" "200" "Get User Profile"

# Test 4: Logout
test_endpoint "POST" "/api/v1/auth/logout" "" "200" "User Logout"

# Test 5: Registration (might fail due to placeholder implementation)
test_endpoint "POST" "/api/v1/auth/register" \
    '{"email": "test@example.com", "password": "TestPassword123!", "full_name": "Test User"}' \
    "200" "User Registration"

# Test 6: Login (might fail due to placeholder implementation)
test_endpoint "POST" "/api/v1/auth/login" \
    '{"email": "test@example.com", "password": "password123"}' \
    "200" "User Login"

# Test 7: Placeholder endpoints
test_endpoint "GET" "/api/v1/users" "" "200" "Users Placeholder"
test_endpoint "GET" "/api/v1/licensing" "" "200" "Licensing Placeholder"
test_endpoint "GET" "/api/v1/business" "" "200" "Business Placeholder"
test_endpoint "GET" "/api/v1/finance" "" "200" "Finance Placeholder"
test_endpoint "GET" "/api/v1/admin" "" "200" "Admin Placeholder"
test_endpoint "GET" "/api/v1/files" "" "200" "Files Placeholder"

echo -e "\n${YELLOW}==================================${NC}"
echo -e "${GREEN}üéâ API Testing Complete!${NC}"
echo -e "\n${YELLOW}Summary:${NC}"
echo "‚Ä¢ Server is running on port 3000"
echo "‚Ä¢ Health checks are working"
echo "‚Ä¢ Authentication endpoints are available"
echo "‚Ä¢ All placeholder endpoints are responsive"
echo "‚Ä¢ Ready for further development!"
